{"version":3,"sources":["webpack:///src/modules/details/directives/index.ts","webpack:///src/modules/details/directives/sortable.directive.ts","webpack:///src/modules/details/services/data.service.ts","webpack:///src/modules/details/services/index.ts","webpack:///src/modules/details/services/tables.service.ts"],"names":["directives","rotate","asc","desc","SBSortableHeaderDirective","direction","sort","emit","column","sbSortable","selector","compare","v1","v2","data","a","b","res","matches","country","term","pipe","name","toLowerCase","includes","transform","area","population","DataService","param","coreService","_loading$","_search$","_data$","_total$","_state","page","pageSize","searchTerm","sortColumn","sortDirection","id","url","receiveFunctionEvent","subscribe","p","kdmenu","CanGetData","GetMetaData","then","metadata","next","_search","result","total","patch","Object","assign","values","filter","length","slice","asObservable","_set","providedIn","services","DetailsService"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { SBSortableHeaderDirective } from './sortable.directive';\r\n\r\nexport const directives = [SBSortableHeaderDirective];\r\n\r\nexport * from './sortable.directive';\r\n","import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';\r\n\r\nexport type SortDirection = 'asc' | 'desc' | '';\r\nconst rotate: { [key: string]: SortDirection } = { asc: 'desc', desc: '', '': 'asc' };\r\n\r\nexport interface SortEvent {\r\n    column: string;\r\n    direction: SortDirection;\r\n}\r\n\r\n@Directive({\r\n    selector: 'th[sbSortable]',\r\n})\r\nexport class SBSortableHeaderDirective {\r\n    @Input() sbSortable!: string;\r\n    @Input() direction: SortDirection = '';\r\n    @Output() sort = new EventEmitter<SortEvent>();\r\n\r\n    @HostBinding('class.asc') get isAscending() {\r\n        return this.direction === 'asc';\r\n    }\r\n    @HostBinding('class.desc') get isDescending() {\r\n        return this.direction === 'desc';\r\n    }\r\n    @HostListener('click') rotate() {\r\n        this.direction = rotate[this.direction];\r\n        this.sort.emit({ column: this.sbSortable, direction: this.direction });\r\n    }\r\n}\r\n","import { DecimalPipe } from '@angular/common';\r\nimport { Injectable, PipeTransform } from '@angular/core';\r\nimport { ActivatedRoute, ActivatedRouteSnapshot, Router, RouterStateSnapshot, NavigationEnd } from '@angular/router';\r\nimport { SortDirection } from '@modules/details/directives';\r\n// import { Country } from '@modules/details/models';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { debounceTime, delay, switchMap, tap } from 'rxjs/operators';\r\nimport { CoreService } from '@modules/services/base.service';\r\nimport { AppParameter } from '@app/app.parameter';\r\nimport { TableData } from '@modules/services/base.model';\r\n\r\ninterface SearchResult {\r\n    data: any[];\r\n    total: number;\r\n}\r\n\r\ninterface State {\r\n    page: number;\r\n    pageSize: number;\r\n    searchTerm: string;\r\n    sortColumn: string;\r\n    sortDirection: SortDirection;\r\n}\r\n\r\nfunction compare(v1: number | string, v2: number | string) {\r\n    return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\r\n}\r\n\r\nfunction sort(data: any[], column: string, direction: string): any[] {\r\n    if (direction === '') {\r\n        return data;\r\n    } else {\r\n        return [...data].sort((a, b) => {\r\n            const res = compare(a[column], b[column]);\r\n            return direction === 'asc' ? res : -res;\r\n        });\r\n    }\r\n}\r\n\r\nfunction matches(country: any, term: string, pipe: PipeTransform) {\r\n    return (\r\n        country.name.toLowerCase().includes(term.toLowerCase()) ||\r\n        pipe.transform(country.area).includes(term) ||\r\n        pipe.transform(country.population).includes(term)\r\n    );\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataService {\r\n    private _loading$ = new BehaviorSubject<boolean>(true);\r\n    private _search$ = new Subject<void>();\r\n    private _data$ = new BehaviorSubject<any[]>([]);\r\n    private _total$ = new BehaviorSubject<number>(0);\r\n\r\n    private _state: State = {\r\n        page: 1,\r\n        pageSize: 4,\r\n        searchTerm: '',\r\n        sortColumn: '',\r\n        sortDirection: '',\r\n    };\r\n    kdmenu!:string;\r\n    constructor(\r\n        private param: AppParameter,\r\n        private coreService: CoreService,\r\n        private pipe: DecimalPipe) {\r\n\r\n        const id = '';\r\n        const url = '';\r\n\r\n        this.param.receiveFunctionEvent().subscribe(\r\n            p => {\r\n                if(p.kdmenu !== ''){\r\n                    this.kdmenu = p.kdmenu;\r\n                    if(this.coreService.CanGetData()){\r\n                        this.coreService.GetMetaData().then(\r\n                        metadata => {\r\n                            this._search$\r\n                            .pipe(\r\n                                tap(() => this._loading$.next(true)),\r\n                                debounceTime(120),\r\n                                switchMap(() => this._search(metadata)),\r\n                                delay(120),\r\n                                tap(() => this._loading$.next(false))\r\n                            )\r\n                            .subscribe(result => {\r\n                                this._data$.next(result.data);\r\n                                this._total$.next(result.total);\r\n                            });\r\n\r\n                            this._search$.next();\r\n                        }\r\n                    );\r\n                    }\r\n\r\n                }\r\n            }\r\n        );\r\n    }\r\n    get data$() {\r\n        return this._data$.asObservable();\r\n    }\r\n    get total$() {\r\n        return this._total$.asObservable();\r\n    }\r\n    get loading$() {\r\n        return this._loading$.asObservable();\r\n    }\r\n    get page() {\r\n        return this._state.page;\r\n    }\r\n    set page(page: number) {\r\n        this._set({ page });\r\n    }\r\n    get pageSize() {\r\n        return this._state.pageSize;\r\n    }\r\n    set pageSize(pageSize: number) {\r\n        this._set({ pageSize });\r\n    }\r\n    get searchTerm() {\r\n        return this._state.searchTerm;\r\n    }\r\n    set searchTerm(searchTerm: string) {\r\n        this._set({ searchTerm });\r\n    }\r\n    set sortColumn(sortColumn: string) {\r\n        this._set({ sortColumn });\r\n    }\r\n    set sortDirection(sortDirection: SortDirection) {\r\n        this._set({ sortDirection });\r\n    }\r\n\r\n    private _set(patch: Partial<State>) {\r\n        Object.assign(this._state, patch);\r\n        this._search$.next();\r\n    }\r\n\r\n    private _search(metadata: TableData): Observable<SearchResult> {\r\n\r\n        const { sortColumn, sortDirection, pageSize, page, searchTerm } = this._state;\r\n\r\n        // 1. sort\r\n        let data = sort(metadata.values, sortColumn, sortDirection);\r\n\r\n        // // 2. filter\r\n        data = data.filter(country => matches(country, searchTerm, this.pipe));\r\n        const total = data.length;\r\n\r\n        // 3. paginate\r\n        data = data.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\r\n        return of({ data, total });\r\n    }\r\n}\r\n","import { DataService } from './data.service';\r\nimport { DetailsService } from './tables.service';\r\n\r\nexport const services = [DetailsService, DataService];\r\n\r\nexport * from './tables.service';\r\nexport * from './data.service';\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class DetailsService {\r\n    constructor() {}\r\n\r\n    getTables$(): Observable<{}> {\r\n        return of({});\r\n    }\r\n}\r\n"]}